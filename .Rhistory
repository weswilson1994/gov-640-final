gsub(pattern = " ", replacement = "_", x = names(data)) %>%
str_to_lower()
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill,
undergrad_enrollment, yr_member = yr,
student_veteran_group = student_veteran, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, online_all, p911_recipients, p911_yr_recipients, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000)
View(gi_bill)
gi_bill %>%
mutate(zip_length = as.character(nchar(zip))) %>%
select(zip_length, zip) %>%
mutate(zip = ifelse(nchar(zip) = 4, paste(0, zip), ifelse(nchar(zip) = 3, paste(00, zip), zip)))
test <- gi_bill %>%
mutate(zip_length = as.character(nchar(zip))) %>%
select(zip_length, zip)
test
View(test)
test %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c(00, zip),
nchar(zip) == 3 ~ str_c(00, zip),
TRUE ~ zip
)
)
test %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("00", zip),
nchar(zip) == 3 ~ str_c("00", zip),
TRUE ~ zip
)
)
test %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ paste("00", zip),
nchar(zip) == 3 ~ paste("00", zip),
TRUE ~ zip
)
)
test %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("00", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)
)
test <- gi_bill %>%
mutate(zip_length = nchar(zip)) %>%
select(zip_length, zip)
View(test)
test %>%
mutate(as_character(zip) = case_when(
test %>%
mutate(zip = as.character(case_when(
nchar(zip) == 4 ~ str_c("00", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)
)
)
glimpse(gi_bill)
test %>%
mutate(zip = as.character(zip)) %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("00", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)
)
test %>%
mutate(zip = as.character(zip)) %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)
)
test %>%
mutate(zip = as.character(zip)) %>%
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)
) %>%
mutate(zip_length = nchar(zip)) %>% view()
glimpse(gi_bill)
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill,
undergrad_enrollment, yr_member = yr,
student_veteran_group = student_veteran, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, online_all, p911_recipients, p911_yr_recipients, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character))
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill,
undergrad_enrollment, yr_member = yr,
student_veteran_group = student_veteran, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, online_all, p911_recipients, p911_yr_recipients, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character()))
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill,
undergrad_enrollment, yr_member = yr,
student_veteran_group = student_veteran, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, online_all, p911_recipients, p911_yr_recipients, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.)))
glimpse(gi_bill)
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill,
undergrad_enrollment, yr_member = yr,
student_veteran_group = student_veteran, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, online_all, p911_recipients, p911_yr_recipients, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
))
View(gi_bill)
unique(gi_bill$yr_member)
unique(gi_bill$student_vet_grp_ipeds)
unique(gi_bill$poe_member)
unique(gi_bill$eight_keys_member)
unique(gi_bill$dodmou)
unique(gi_bill$credit_for_mil_training)
unique(gi_bill$vet_poc)
unique(gi_bill$online_all)
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, state, zip, type, bah,
n_gibill = gibill, undergrad_enrollment, p911_recipients, p911_yr_recipients,
yr_member = yr, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)) %>%
# Now replace NA values for select columns.
mutate(across(c(eight_keys_member, dodmou), ~replace_na(., FALSE)))
View(gi_bill)
glimpse(gi_bill)
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip, by = c("GEOID" = zip))
vets_by_zip %>%
mutate(zip = as.character("GEOID")) %>%
select(zip, n_vets = estimate)
vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets = estimate)
# Prep the census data for join.
vets_by_zip <- vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets = estimate)
# Prep the census data for join.
vets_by_zip <- vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets_census = estimate)
# Get the number of veterans by zip code from the 2017-2021 ACS survey, which surveys geographies with a population of 20,000 or more.
vets_by_zip <- get_acs(geography = "zcta", variables = "B21001_002", year = 2021, survey = "acs5")
# Prep the census data for join.
vets_by_zip <- vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets_census = estimate)
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip)
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip) %>%
view()
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip) %>%
filter(is.na(n_vets_census)) %>%
select(zip, institution, n_vets_census)
vets_by_zip %>%
filter(zip == "10276")
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip) %>%
filter(is.na(n_vets_census)) %>%
select(zip, institution, n_vets_census) %>%
filter(!duplicated(zip))
View(data)
# Prep the G.I. Bill data a bit
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, city, state, zip, type, bah,
n_gibill = gibill, undergrad_enrollment, p911_recipients, p911_yr_recipients,
yr_member = yr, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)) %>%
# Now replace NA values for select columns.
mutate(across(c(eight_keys_member, dodmou), ~ replace_na(., FALSE)))
# Join the G.I. Bill data with census data.
left_join(x = gi_bill, y = vets_by_zip) %>%
filter(is.na(n_vets_census)) %>%
select(zip, institution, n_vets_census) %>%
filter(!duplicated(zip))
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = vets_by_zip)
gi_bill %>%
select(n_gibill, vets_by_zip)
gi_bill %>%
select(n_gibill, n_vets_census) %>% view()
gi_join %>%
select(n_gibill, n_vets_census) %>% view()
# Get the number of veterans by zip code from the 2017-2021 ACS survey, which surveys geographies with a population of 20,000 or more.
vets_by_zip <- get_acs(geography = "zcta", variables = "B21001_002", year = 2021, survey = "acs5")
# Prep the census data for join.
census_vets <- vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets_census = estimate, moe)
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = census_vets)
View(gi_join)
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census)) %>%
select(institution, city, zip, n_vets_census)
View(gi_join)
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(institution)) %>%
select(institution, city, zip, n_vets_census)
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(zip)) %>%
select(institution, city, zip, n_vets_census)
View(gi_join)
# Join the G.I. Bill data with census data.
gi_join <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(zip)) %>%
select(institution, state, city, zip, n_vets_census)
View(gi_join)
gi_bill %>% filter(city == "NEW YORK") %>% view()
View(gi_join)
install.packages("fuzzyjoin")
library(fuzzyjoin)
regex_left_join(x = gi_bill, y = census_vets, by = c("zip" = "zip"), max_dist = 2)
stringdist_left_join(x = gi_bill, y = census_vets, by = c("zip" = "zip"), max_dist = 2)
stringdist_left_join(x = gi_bill, y = census_vets, max_dist = 2)
stringdist_left_join(x = gi_bill, y = census_vets, max_dist = 2) %>%
filter(!duplicated(facility_code))
stringdist_left_join(x = gi_bill, y = census_vets, max_dist = 1) %>%
filter(!duplicated(facility_code))
gi_join <- stringdist_left_join(x = gi_bill, y = census_vets, max_dist = 1) %>%
filter(!duplicated(facility_code))
View(gi_join)
# Try to join the G.I. Bill data with census data. There are about about ten observations that aren't
gi_join <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(zip)) %>%
select(institution, state, city, zip, n_vets_census)
gi_join <- left_join(x = gi_bill, y = census_vets)
View(gi_join)
# Try to join the G.I. Bill data with census data. There are about about ten observations that aren't
missing_matches <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(zip)) %>%
select(institution, state, city, zip, n_vets_census)
View(missing_matches)
gi_bill[missing_matches$zip, ]
gi_bill[as_vector(missing_matches$zip), ]
gi_bill[as_vector(missing_matches$zip), "zip"]
census_vets[as_vector(missing_matches$zip), "zip"]
missing_matches$zip
missing_matches$zip
missing <- missing_matches$zip
gi_bill[missing, "zip"]
missing <- which(missing_matches$zip)
which(gi_bill = missing)
which(gi_bill$zip == missing)
which(gi_bill$zip = missing)
gi_bill[missing, "zip"]
gi_bill[zip = missing,]
gi_bill$zip[missing_matches$zip]
gi_bill %>%
filter(zip = 10276)
gi_bill %>%
filter(zip == 10276)
gi_bill$zip[c(missing_matches$zip)]
missing <- which(gi_bill$zip %in% missing_matches$zip)
gi_bill[missing, ]
View(missing_matches)
new_zip_codes <- c(10011, 37210, 03784, 33410, 06511, 28202, 90606, 05401, 19611, 33125)
gi_bill[missing, ]
gi_bill[missing, "zip"]
gi_bill[missing, "zip"] <- new_zip_codes
gi_bill[unique(missing), "zip"] <- new_zip_codes
gi_bill[unique(missing), "zip"]
gi_bill$zip[c(missing_matches$zip)]
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes)
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets)
View(census_vets)
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(y = census_vets, by = c("zip" = "new_zip"))
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(., y = census_vets, by = c("zip" = "new_zip"))
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(., y = census_vets)
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(., y = census_vets, by = c("zip" = "new_zip"))
replacing_missing <- left_join(x = replacing_missing, y = census_vets, by = c("zip" = "new_zip"))
replacing_missing <- left_join(x = replacing_missing, y = census_vets, by = c("new_zip" = "zip"))
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = as.character(new_zip_codes)) %>%
left_join(y = y = census_vets, by = c("new_zip" = "zip"))
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = as.character(new_zip_codes)) %>%
left_join(y = census_vets, by = c("new_zip" = "zip"))
View(replacing_missing)
new_zip_codes <- c("10011", "37210", "03784", "33410", "06511", "28202", "90606", "05401", "19611", "33125")
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(y = census_vets, by = c("new_zip" = "zip"))
View(replacing_missing)
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets)
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip"))
View(gi_bill)
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip")) %>%
mutate(n_vets_census = coalesce(n_vets_census.x, n_vets_census.y))
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip")) %>%
mutate(n_vets_census = coalesce(n_vets_census.x, n_vets_census.y)) %>%
mutate(moe = coalesce(moe.x, moe.y, moe.x.x, moe.y.y))
# Prep the G.I. Bill data a bit
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, city, state, zip, type, bah,
n_gibill = gibill, undergrad_enrollment, p911_recipients, p911_yr_recipients,
yr_member = yr, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)) %>%
# Now replace NA values for select columns.
mutate(across(c(eight_keys_member, dodmou), ~ replace_na(., FALSE)))
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip")) %>%
mutate(n_vets_census = coalesce(n_vets_census.x, n_vets_census.y)) %>%
mutate(moe = coalesce(moe.x, moe.y))
# Prep the G.I. Bill data a bit
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, city, state, zip, type, bah,
n_gibill = gibill, undergrad_enrollment, p911_recipients, p911_yr_recipients,
yr_member = yr, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)) %>%
# Now replace NA values for select columns.
mutate(across(c(eight_keys_member, dodmou), ~ replace_na(., FALSE)))
# Now put it all together
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip")) %>%
mutate(n_vets_census = coalesce(n_vets_census.x, n_vets_census.y)) %>%
mutate(moe = coalesce(moe.x, moe.y)) %>%
select(-moe.x, - moe.y, - n_vets_census.x, - n_vets_census.y, - new_zip)
View(gi_bill)
getwd()
saveRDS(object = data, file = "/data/original/gi_bill_comparison_tool.rds")
saveRDS(object = data, file = "./data/original/gi_bill_comparison_tool.rds")
saveRDS(object = census_vets, file = "./data/original/vets_acs_survey_by_zip_code.rds")
saveRDS(object = gi_bill, file = "./data/original/final_gi_bill_data_for_analysis.rds")
saveRDS(object = gi_bill, file = "./data/final/final_gi_bill_data_for_analysis.rds")
# Access the data from the G.I. Bill Comparison tool.
data_url <- "https://www.benefits.va.gov/GIBILL/docs/job_aids/ComparisonToolData.xlsx"
GET(data_url, write_disk(path = tf <- tempfile(fileext = ".xlsx")))
data <- read_excel(path = tf, sheet = "Comparison_Tool_Data_Full", guess_max = 1000000) %>%
filter(type == c("PRIVATE", "PUBLIC", "FOR PROFIT") & approved == TRUE)
# Fix the names of the data so they are easier to work with:
names(data) <- names(data) %>%
gsub(pattern = " ", replacement = "_", x = names(data)) %>%
str_to_lower()
dictionary <- read.xlsx(data_url, sheet = "Data Dictionary")
# Fix the names of the data so they are easier to work with:
names(data) <- names(data) %>%
gsub(pattern = " ", replacement = "_", x = names(data)) %>%
str_to_lower()
# Now I am going to pull data from the census.
key_get("census_api_key_wes")
#List and save the available variables.
variables <- load_variables(2021, "acs5", cache = FALSE)
# Get the number of veterans by zip code from the 2017-2021 ACS survey, which surveys geographies with a population of 20,000 or more.
vets_by_zip <- get_acs(geography = "zcta", variables = "B21001_002", year = 2021, survey = "acs5")
# Prep the G.I. Bill data a bit
gi_bill <- data %>%
# Select only the variables that are useful.
select(facility_code, ope, ope6, institution, city, state, zip, type, bah,
n_gibill = gibill, undergrad_enrollment, p911_recipients, p911_yr_recipients,
yr_member = yr, poe_member = poe, eight_keys_member = eight_keys,
dodmou, credit_for_mil_training, vet_poc, student_vet_grp_ipeds,
graduation_rate_all_students, retention_all_students_ba, salary_all_students,
annual_tuition = tuition_in_state, p911_tuition_fees, p911_yellow_ribbon
) %>%
# I am going to limit my analysis to only private schools, whose tuition exceeds $25,000; this way I can isolate Yellow Ribbon scholarships.
filter(type == "PRIVATE" & annual_tuition > 25000) %>%
#Make sure the data types are correct.
mutate(across(c(zip), ~ as.character(.))) %>%
# fix the zip code so I can join later.
mutate(zip = case_when(
nchar(zip) == 4 ~ str_c("0", zip, sep = ""),
nchar(zip) == 3 ~ str_c("00", zip, sep = ""),
TRUE ~ zip
)) %>%
# Now replace NA values for select columns.
mutate(across(c(eight_keys_member, dodmou), ~ replace_na(., FALSE)))
# Prep the census data for join.
census_vets <- vets_by_zip %>%
mutate(zip = as.character(GEOID)) %>%
select(zip, n_vets_census = estimate, moe)
# Try to join the G.I. Bill data with census data. There are about about ten observations that aren't
missing_matches <- left_join(x = gi_bill, y = census_vets) %>%
filter(is.na(n_vets_census) & !duplicated(zip)) %>%
select(institution, state, city, zip, n_vets_census)
missing <- which(gi_bill$zip %in% missing_matches$zip)
new_zip_codes <- c("10011", "37210", "03784", "33410", "06511", "28202", "90606", "05401", "19611", "33125")
replacing_missing <- tibble(old_zip = missing_matches$zip, new_zip = new_zip_codes) %>%
left_join(y = census_vets, by = c("new_zip" = "zip"))
replacing_missing <- left_join(x = replacing_missing, y = census_vets, by = c("new_zip" = "zip"))
# Now join all the data together.
gi_bill <- left_join(x = gi_bill, y = census_vets) %>%
left_join(y = replacing_missing, by = c("zip" = "old_zip")) %>%
mutate(n_vets_census = coalesce(n_vets_census.x, n_vets_census.y)) %>%
mutate(moe = coalesce(moe.x, moe.y)) %>%
select(-moe.x, - moe.y, - n_vets_census.x, - n_vets_census.y, - new_zip)
#export the original data
saveRDS(object = data, file = "./data/original/gi_bill_comparison_tool.rds")
saveRDS(object = census_vets, file = "./data/original/gi_bill_data_dictionary")
saveRDS(object = census_vets, file = "./data/original/vets_acs_survey_by_zip_code.rds")
#export the final data for analysis
saveRDS(object = gi_bill, file = "./data/final/final_gi_bill_data_for_analysis.rds")
